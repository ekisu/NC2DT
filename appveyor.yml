environment:
  matrix:
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python37-x64"

install:
  # We need wheel installed to build wheels
  - "mkdir src\\main\\resources\\windows"
  - "curl -L --output windows.zip https://files.catbox.moe/0ohnae.zip"
  - "7z x windows.zip -osrc\\main\\resources\\"

build_script:
  - "%PYTHON%\\python.exe -m venv venv"
  - "venv\\Scripts\\activate.bat"
  - "python -m pip install -r requirements.txt"
  - "venv\\Scripts\\deactivate.bat"

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "venv\\Scripts\\activate.bat"
  - "make test"
  - "venv\\Scripts\\deactivate.bat"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "venv\\Scripts\\activate.bat"
  - "fbs freeze"
  - "venv\\Scripts\\deactivate.bat"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: target\NC2DT

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.